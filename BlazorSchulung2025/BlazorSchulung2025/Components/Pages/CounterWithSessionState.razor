@page "/counter-with-session-state/{startCounterAt:int?}"
@using Blazored.LocalStorage
@using BlazorSchulung2025.Models
@using JetBrains.Annotations
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Components.Sections

<PageTitle>Counter With Session State</PageTitle>

<h3>Counter With Session State</h3>

<button @onclick="@IncrementCountAsync"
        @attributes="AdditionalParameters">Raufz√§hlen
</button>

<p>@CounterValue</p>

@code {
    [Inject] public ProtectedLocalStorage LocalSessionStore { get; set; }
    
    [Inject] public ILocalStorageService LocalStore { get; set; }

    [Inject] public ApplicationState ApplicationState { get; set; }
    [Parameter] public int StartCounterAt { get; set; } = 0;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalParameters { get; set; }

    [Inject] ILogger<Counter> Logger { get; set; }
    [Inject] PersistentComponentState PersistentComponentState { get; set; }
    private PersistingComponentStateSubscription? _persistingSubscription;
    private string _cacheKey = "CounterCacheKey";
    int CounterValue { get; set; }

    [UsedImplicitly]
    protected override async Task OnInitializedAsync()
    {
        // CounterValue = ApplicationState.CurrentCounterValue;
        // CounterValue = await LocalStore.GetItemAsync<int>("CounterValue");
        try
        {
            var result = await LocalSessionStore.GetAsync<int>("CounterValue");
            if (result.Success)
            {
                CounterValue = result.Value;
            }
            else
            {
                CounterValue = StartCounterAt;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error retrieving CounterValue from ProtectedSessionStore");
            CounterValue = StartCounterAt;
        }

        await base.OnInitializedAsync();
    }

    private async Task IncrementCountAsync()
    {
        CounterValue++;
        // ApplicationState.CurrentCountValue = CounterValue;
        // await LocalStore.SetItemAsync<int>("CounterValue", CounterValue);
        await LocalSessionStore.SetAsync("CounterValue", CounterValue);
    }

}